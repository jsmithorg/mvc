package org.jsmith.mvc.view{	import org.jsmith.mvc.error.*;	import org.jsmith.mvc.events.MVCEvent;		import flash.utils.Dictionary;
	import flash.events.EventDispatcher;		/**	 * 	Dispatched when an <code>IView</code> instance has been registered.	 * 	 * 	@see org.jsmith.mvc.view.IView	 *  @see org.jsmith.mvc.view.View	 */	[Event(name="viewRegistered", type="org.jsmith.mvc.events.MVCEvent.VIEW_REGISTERED")]		/**	 * 	Dispatched when an <code>IView</code> instance has been removed.	 *  	 *  @see org.jsmith.mvc.view.IView	 *  @see org.jsmith.mvc.view.View	 */	[Event(name="viewRemoved", type="org.jsmith.mvc.events.MVCEvent.VIEW_REMOVED")]		/**	 * 	The <code>ViewRegister</code> is a single access point to all the applications	 * 	view instances (<code>IView</code>).	 * 	<p><code>IView</code> instances must be registered using this class in order	 * 	to participate in the MVC framework.</p>	 *  <p>Events are dispatched when <code>IView</code> instances are registered or 	 * 	removed.</p>	 * 	 * 	@see org.jsmith.mvc.view.IView	 * 	@see org.jsmith.mvc.view.View	 * 	 * 	@author Justin Smith [justin@jsmith.org]	 */	public class ViewRegister extends EventDispatcher implements IViewRegister	{		/**		 * 	Our singleton instance of the ViewRegister class		 */		private static var instance:IViewRegister;				/**		 * 	@inheritDoc		 */		public function get views():Dictionary { return _views; }		private var _views:Dictionary;				/**		 * 	Constructor. Do not instantiate this directly, use  the static <code>getInstance()</code>		 * 	method instead.		 * 	<p>Attempting to instantiate the <code>ViewRegister</code> directly		 * 	will result in an error.</p>		 * 		 * 	@throws org.jsmith.mvc.error.MVCError If an attempt is made to instantiate this class 		 * 	instead of using the static <code>getInstance()</code> method, this error is thrown		 *  with the message: <em>the class is a singleton, to access the instance, please use the static method getInstance() instead</em>		 */		public function ViewRegister(enforcer:SingletonEnforcer = null)		{			if(enforcer == null) 				throw new MVCError(MVCErrorCodes.SINGLETON_ERROR);							_views = new Dictionary();					}//end constructor				/**		 * 	Retrieves an instance of the ViewRegister.		 * 		 * 	@return An <code>IViewRegister</code> instance representing		 * 	the <code>ViewRegister</code> instance.		 */		public static function getInstance():IViewRegister 		{			if(instance == null) 				instance = new ViewRegister(new SingletonEnforcer());							return instance;					}//end method				/**		 * 	Static method to get the <code>Dictionary</code> object		 * 	containing all the registered <code>IView</code> instances.		 * 		 * 	@return A <code>Dictionary</code> of <code>IView</code> instances.		 */		public static function getViews():Dictionary		{			return getInstance().views;					}//end method				/**		 * 	@inheritDoc		 */		public function register(view:IView, viewID:String = null):void		{			//throw an error if the viewID is not set in either the IView			//or the optional viewID parameter.			if(view.id == null && viewID == null)				throw new MVCError(MVCErrorCodes.VIEW_ID_NOT_SET, view.toString());						//set the IView's viewID if the optional viewID parameter is used.			if(viewID != null)				view.id = viewID;						//stick the view in the dictionary			_views[view.id] = view;						//notify whoever's listening that this view is registered			dispatchEvent(new MVCEvent(MVCEvent.VIEW_REGISTERED, view));					}//end method			/**		 * 	@inheritDoc		 */		public function retrieve(viewID:String):IView		{			return _views[viewID];					}//end method			/**		 * 	@inheritDoc		 */		public function remove(viewID:String):void		{			//if the view exists, delete it from the dictionary			//and dispatch the VIEW_REMOVED event			if(hasView(viewID)) 			{				var view:IView = _views[viewID];								delete _views[viewID];								dispatchEvent(new MVCEvent(MVCEvent.VIEW_REMOVED, view));						}//end if					}//end method				/**		 * 	@inheritDoc		 */		public function hasView(viewID:String):Boolean		{			return _views[viewID] != null;					}//end method			/**		 * 	Returns a string representation of the <code>ViewRegister</code> object.		 */		public override function toString():String 		{			return "[ ViewRegister ]";					}//end method			}//end class	}//end package/** * 	This is an internal class used to enforce a Singleton. * 	<p>The class may only be used within this .as file and * 	the constructor may only be initialized with an instance * 	of this class.</p> */internal class SingletonEnforcer{}