package org.jsmith.mvc.controller.command{	import flash.events.Event;		import org.jsmith.mvc.controller.command.ICommand;	import org.jsmith.mvc.error.*;	import org.jsmith.mvc.events.MVCEvent;		/**	 * 	Dispatched when an <code>ICommand</code> instance progresses.	 * 	 * 	@see org.jsmith.mvc.controller.command.ICommand	 */	[Event(name="commandProgress", type="org.jsmith.mvc.events.MVCEvent.COMMAND_PROGRESS")]		public class SequenceCommand extends Command implements ICommand, ICommandProgress	{		public override function get percentComplete():Number		{			var _percentComplete:Number = -1;						for(var i:int=0;i<_commands.length;i++)			{				var c:ICommandProgress  = _commands[i] as ICommandProgress;								if(c.percentComplete == -1)					return c.percentComplete;								if(_percentComplete == -1)					_percentComplete = 0;									_percentComplete += c.percentComplete;								}//end for						if(_percentComplete != -1)				_percentComplete /= _commands.length;						return _percentComplete;					}//end property				public function get commandsCompleted():int { return _commandsCompleted; }		private var _commandsCompleted:int;				public function get commandsTotal():int { return _commands.length; }				protected var event:Event;				private var _commands:Array;		private var _nextCommandIndex:int;				public function SequenceCommand()		{			_commands = new Array();			_commandsCompleted = 0;			_nextCommandIndex = 0;					}//end constructor				public function add(command:ICommand):void		{			_commands.push(command);					}//end method				public function remove(command:ICommand):void		{			var i:int = _commands.indexOf(command);			if(i < 0)				return;							_commands.splice(i,1);					}//end method				public override function execute(event:Event = null):void 		{			if(_commands.length < 1)				throw new MVCError(MVCErrorCodes.COMMAND_EMPTY);							this.event = event;						executeCommand(_nextCommandIndex, event);						}//end method				private function executeCommand(index:int, e:Event):void		{			var c:ICommand = _commands[index] as ICommand;			c.addEventListener(MVCEvent.COMMAND_PROGRESS, onCommandProgress);			c.addEventListener(Event.COMPLETE, onCommandComplete);			c.execute(e);					}//end method				private function onCommandProgress(e:MVCEvent):void		{			onProgress();					}//end method				private function onCommandComplete(e:Event):void		{			_commandsCompleted++;			_nextCommandIndex++;						onProgress();						if(_commands[_nextCommandIndex] == null)			{				onComplete();				return;							}//end if						executeCommand(_nextCommandIndex, event);					}//end method			}//end class	}//end package