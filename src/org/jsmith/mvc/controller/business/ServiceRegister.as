package org.jsmith.mvc.controller.business{	import org.jsmith.mvc.error.*;		import mx.rpc.http.HTTPService;	import mx.rpc.soap.WebService;		public class ServiceRegister implements IServiceRegister	{		// Singleton instance		private static var instance:IServiceRegister;				private var _httpServices:HTTPServiceCollection;       // private var _remoteObjects : RemoteObjects;        private var _webServices:WebServiceCollection;	  		public function ServiceRegister(enforcer:SingletonEnforcer = null)		{			if(enforcer == null) 				throw new MVCError(MVCErrorCodes.SINGLETON_ERROR);						}//end constructor			public static function getInstance():IServiceRegister		{			if(instance == null) 				instance = new ServiceRegister(new SingletonEnforcer());							return instance;					}//end method				public function register(service:IServiceDefinition):void 		{			if(service is WebServiceDefinition)			{				webServices.addService(service);			}			else if(service is HTTPServiceDefinition)			{				httpServices.addService(service);			}			//else if(service is RemoteObjectDefinition){}					}//end method				public function getHTTPService(serviceID:String):HTTPService		{			return httpServices.getService(serviceID) as HTTPService;					}//end method				//public function getRemoteObject( name : String ) : RemoteObject		public function getRemoteObject( name : String ) : void		{					}//end method					public function getWebService(serviceID:String):WebService		{			return webServices.getService(serviceID) as WebService;					}//end method				public function setCredentials( username : String, password : String ) : void		{					}				public function setRemoteCredentials( username : String, password : String ) : void		{					}				public function logout():void		{			httpServices.logout();			//remoteObjects.logout();			webServices.logout();					}//end method				private function get httpServices():HTTPServiceCollection		{			 if(_httpServices == null)			 {				_httpServices = new HTTPServiceCollection();				//_httpServices.register(this);							 }//end if			 			 return _httpServices;				}//end method				/*private function get remoteObjects() : RemoteObjects		{		 if ( _remoteObjects == null )		 {			_remoteObjects = new RemoteObjects();			_remoteObjects.register( this );		 }		 		 return _remoteObjects;		}		*/				private function get webServices():WebServiceCollection		{			if(_webServices == null)			{				_webServices = new WebServiceCollection();				//_webServices.register(this);						}//end if			 			return _webServices;		 		}//end method	  	}//end class	}//end packageinternal class SingletonEnforcer{}