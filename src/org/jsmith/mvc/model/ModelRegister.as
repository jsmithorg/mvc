package org.jsmith.mvc.model{	import org.jsmith.mvc.error.*;	import org.jsmith.mvc.events.MVCEvent;		import flash.utils.Dictionary;
	import flash.events.EventDispatcher;		/**	 * 	Dispatched when an <code>IModel</code> instance has been registered.	 * 	 * 	@see org.jsmith.mvc.model.IModel	 *  @see org.jsmith.mvc.model.IModel	 */	[Event(name="modelRegistered", type="org.jsmith.mvc.events.MVCEvent.MODEL_REGISTERED")]		/**	 * 	Dispatched when an <code>IModel</code> instance has been removed.	 * 	 * 	@see org.jsmith.mvc.model.IModel	 *  @see org.jsmith.mvc.model.IModel	 */	[Event(name="modelRemoved", type="org.jsmith.mvc.events.MVCEvent.MODEL_REMOVED")]		/**	 * 	The <code>ModelRegister</code> is a single access point to all the applications	 * 	model instances (<code>IModel</code>).	 * 	<p><code>IModel</code> instances must be registered using this class in order	 * 	to participate in the MVC framework.</p>	 *  <p>Events are dispatched when <code>IModel</code> instances are registered or 	 * 	removed.</p>	 * 	 * 	@see org.jsmith.mvc.model.IModel	 * 	 * 	@author Justin Smith [justin.smith@glg.com]	 */	public class ModelRegister extends EventDispatcher implements IModelRegister	{		/**		 * 	Our singleton instance of the ViewRegister class		 */		private static var instance:IModelRegister;				/**		 * 	@inheritDoc		 */		public function get models():Dictionary { return _models; }		private var _models:Dictionary;				/**		 * 	Constructor. Do not instantiate this directly, use  the static <code>getInstance</code>		 * 	method instead.		 * 	<p>Attempting to instantiate the <code>ModelRegister</code> directly		 * 	will result in an error.</p>		 * 		 * 	@throws org.jsmith.mvc.error.MVCError If an attempt is made to instantiate this class 		 * 	instead of using the static <code>getInstance</code> method, this error is thrown		 *  with the message: <em>the class is a singleton, to access the instance, please use the static method getInstance() instead</em>		 */		public function ModelRegister(enforcer:SingletonEnforcer = null)		{			if(enforcer == null) 				throw new MVCError(MVCErrorCodes.SINGLETON_ERROR);							_models = new Dictionary();						}//end constructor				/**		 * 	Retrieves an instance of the ModelRegister.		 * 		 * 	@return An <code>IModelRegister</code> instance representing		 * 	the <code>ModelRegister</code> instance.		 */		public static function getInstance():IModelRegister 		{			if (instance == null) 				instance = new ModelRegister(new SingletonEnforcer());							return instance;				}//end method			/**		 * 	Static method to get the <code>Dictionary</code> object		 * 	containing all the registered <code>IModel</code> instances.		 * 		 * 	@return A <code>Dictionary</code> of <code>IModel</code> instances.		 */		public static function getModels():Dictionary		{			return getInstance().models;					}//end method				/**		 * 	@inheritDoc		 */		public function register(model:IModel, modelID:String = null):void		{			//throw an error if the modelID is not set in either the IModel			//or the optional modelID parameter.			if(model.id == null && modelID == null)				throw new MVCError(MVCErrorCodes.MODEL_ID_NOT_SET, model.toString());						//set the IModel's modelID if the optional modelID parameter is used.			if(modelID != null)				model.id = modelID;							//stick the model in the dictionary			_models[model.id] = model;						//notify whoever's listening that this model is registered			dispatchEvent(new MVCEvent(MVCEvent.MODEL_REGISTERED, model));					}//end method				/**		 * 	@inheritDoc		 */		public function retrieve(modelID:String):IModel		{			return _models[modelID];				}//end method			/**		 * 	@inheritDoc		 */		public function remove(modelID:String):void		{			//if the model exists, delete it from the dictionary			//and dispatch the MODEL_REMOVED event			if(hasModel(modelID))			{				var model:IModel = _models[modelID];								delete _models[modelID];								dispatchEvent(new MVCEvent(MVCEvent.MODEL_REMOVED, model));							}//end if					}//end method				/**		 * 	@inheritDoc		 */		public function hasModel(modelID:String):Boolean		{			return _models[modelID] != null;					}//end method			/**		 * 	Returns a string representation of the <code>ModelRegister</code> object.		 */		public override function toString():String		{			return "[ ModelRegister ]";					}//end method		}//end class	}//end package/** * 	This is an internal class used to enforce a Singleton. * 	<p>The class may only be used within this .as file and * 	the constructor may only be initialized with an instance * 	of this class.</p> */internal class SingletonEnforcer{}