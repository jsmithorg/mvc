package com.glg.mvc.error{	public class MVCError extends Error implements IMVCError	{		public static const SINGLETON_ERROR:String = "singletonError";		public static const ABSTRACT_METHOD_ERROR:String = "abstractMethodError";		public static const COMMAND_NOT_FOUND:String = "commandNotFound";		public static const CLASS_NOT_ICOMMAND:String = "classNotICommand";		public static const DISPLAY_OBJECT_IS_NULL:String = "displayObjectIsNull";		public static const COMMAND_EMPTY:String = "commandEmpty";		public static const SERVICE_NOT_FOUND:String = "serviceNotFound";		public static const FRONT_CONTROLLER_NOT_NULL:String = "frontControllerNotNull";		public static const CLASS_NOT_FRONT_CONTROLLER:String = "classNotFrontController";		public static const VIEW_ID_NOT_SET:String = "viewIDNotSet";		public static const MODEL_ID_NOT_SET:String = "modelIDNotSet";				public var innerError:IMVCError;		public var type:String;				public function MVCError(type:String = "", s:String = "", innerError:IMVCError = null)		{			super(s);						this.name = "MVC Error";			this.type = type;			this.innerError = innerError;					}//end constructor				private function getErrorMessage():String		{			var errorMessage:String;						switch(this.type)			{				case SINGLETON_ERROR:					errorMessage = this.name + " :: the class is a singleton, to access the instance, please use the static method getInstance() instead";					errorMessage += (message != "") ? ": " + message : "";					break;								case ABSTRACT_METHOD_ERROR:					errorMessage = this.name + " :: abstract method must be overridden in the subclass";					errorMessage += (message != "") ? ": " + message : "";					break;									case COMMAND_NOT_FOUND:					errorMessage = this.name + " :: command not found for event";					errorMessage += (message != "") ? ": " + message : "";					break;									case CLASS_NOT_ICOMMAND:					errorMessage = this.name + " :: class must implement the ICommand interface";					errorMessage += (message != "") ? ": " + message : "";					break;								case DISPLAY_OBJECT_IS_NULL:					errorMessage = this.name + " :: an IView instance must be instantiated with a DisplayObject";					errorMessage += (message != "") ? ": " + message : "";					break;								case COMMAND_EMPTY:					errorMessage = this.name + " :: complex command is empty.  Add ICommands with addSubCommand before executing";					errorMessage += (message != "") ? ": " + message : "";					break;									case SERVICE_NOT_FOUND:					errorMessage = this.name + " :: the specified service was not found";					errorMessage += (message != "") ? ": " + message : "";					break;									case FRONT_CONTROLLER_NOT_NULL:					errorMessage = this.name + " :: the front controller can only be set once";					errorMessage += (message != "") ? ": " + message : "";					break;									case CLASS_NOT_FRONT_CONTROLLER:					errorMessage = this.name + " :: the class must extend FrontController";					errorMessage += (message != "") ? ": " + message : "";					break;									case VIEW_ID_NOT_SET:					errorMessage = this.name + " :: viewID must be set before registering the IView";					errorMessage += (message != "") ? ": " + message : "";					break;									case MODEL_ID_NOT_SET:					errorMessage = this.name + " :: modelID must be set before registering the IModel";					errorMessage += (message != "") ? ": " + message : "";					break;									default:					errorMessage = this.name + " :: " + message;					break;								}//end switch						return errorMessage;					}//end method				public function toString():String		{			var errorMessage:String = this.getErrorMessage();						if(this.innerError)				errorMessage += "\n\t:: " + this.innerError;							return errorMessage;					}//end method			}//end class	}//end package