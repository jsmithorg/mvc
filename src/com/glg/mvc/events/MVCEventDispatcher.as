package com.glg.mvc.events{	import com.glg.mvc.error.MVCError;		import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;   	public class MVCEventDispatcher	{		private static var instance:MVCEventDispatcher;  		private var eventDispatcher:IEventDispatcher;				/**		* Returns the single instance of the dispatcher		*/ 		public static function getInstance():MVCEventDispatcher 		{			if(instance == null)				instance = new MVCEventDispatcher(new SingletonEnforcer());						return instance;					}//end method				/**		* Constructor.		*/		public function MVCEventDispatcher(enforcer:SingletonEnforcer = null) 		{			if(enforcer == null)				throw new MVCError(MVCError.SINGLETON_ERROR);							eventDispatcher = new EventDispatcher();				}//end method				/**		* Adds an event listener.		*/		public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void 		{			eventDispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);				}//end method				/**		* Removes an event listener.		*/		public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void 		{			eventDispatcher.removeEventListener(type, listener, useCapture);				}//end method				/**		* Dispatches a cairngorm event.		*/		public function dispatchEvent(event:MVCEvent):Boolean 		{			return eventDispatcher.dispatchEvent(event);				}//end method				/**		* Returns whether an event listener exists.		*/		public function hasEventListener(type:String):Boolean 		{			return eventDispatcher.hasEventListener(type);					}//end method				/**		* Returns whether an event will trigger.		*/		public function willTrigger(type:String):Boolean 		{			return eventDispatcher.willTrigger(type);				}//end method	  	}//end class	}//end packageinternal class SingletonEnforcer{}