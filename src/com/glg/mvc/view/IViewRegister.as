package com.glg.mvc.view{
	import flash.utils.Dictionary;
	import flash.events.IEventDispatcher;			public interface IViewRegister extends IEventDispatcher	{		/**		 * The <code>Dictionary</code> containing the <code>IView</code> instances.		 */		function get views():Dictionary;				/**		 * 	Registers an <code>IView</code> instance with the <code>ViewRegister</code>.		 *			 * 	@param view The <code>IView</code> instance.		 *  @param viewID The ID of the <code>IView</code> instance (this is optional 		 *  in case the viewID has been set in the <code>IView</code> instance).		 * 		 * 	@throws com.glg.mvc.error.MVCError The viewID must be set (either in the IView		 * 	or as a provided parameter), otherwise this error is thrown with the following 		 * 	message: <em>viewID must be set before registering the IView</em>		 */		function register(view:IView, viewID:String = null):void;		/**		 * 	Retrieves a particular view based on the view's ID.		 * 	<p>If the view does not exist, <code>null</code> is 		 * 	returned</p>		 * 		 *  @param viewID The ID of the <code>IView</code> instance.		 * 		 * 	@return An <code>IView</code> instance.		 */		function retrieve(viewID:String):IView;			/**		 * 	Removes a particular view based on the view's ID.		 * 	<p>If the view does not exist, the <code>remove</code>		 * 	request is silently ignored.</p>		 * 		 * 	@param viewID The ID of the <code>IView</code> instance.		 */		function remove(viewID:String):void;				/**		 * 	Boolean expressing whether a particular view is registered or		 * 	not based on the view's ID.		 * 		 * 	@param viewID The ID of the <code>IView</code> instance.		 * 		 * 	@return <code>true</code> if the view is present, <code>false</code> if the view could not be found.		 */		function hasView(viewID:String):Boolean;			}//end interface	}//end package