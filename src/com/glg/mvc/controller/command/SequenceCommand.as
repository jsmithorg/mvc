package com.glg.mvc.controller.command{	import flash.events.Event;	import com.glg.mvc.controller.command.ICommand;	import com.glg.mvc.error.MVCError;		public class SequenceCommand extends Command implements ICommand	{		private var subCommands:Array;		private var nextCommandIndex:int;				public function SequenceCommand()		{			this.subCommands = new Array();			this.nextCommandIndex = 0;					}//end constructor				public function addSubCommand(command:ICommand):void		{			this.subCommands.push(command);					}//end method				public override function execute(event:Event = null):void 		{			if(this.subCommands.length < 1)				throw new MVCError(MVCError.COMMAND_EMPTY);							this.executeCommand(this.nextCommandIndex, event);						}//end method				private function executeCommand(index:int, event:Event):void		{			var command:Command = this.subCommands[index] as Command;			command.addEventListener(Event.COMPLETE, onSubCommandComplete);			command.execute(event);					}//end method				private function onSubCommandComplete(event:Event):void		{			this.nextCommandIndex++;						if(this.subCommands[this.nextCommandIndex] == null)			{				this.dispatchEvent(new Event(Event.COMPLETE));				return;							}//end if						this.executeCommand(this.nextCommandIndex, event);					}//end method			}//end class	}//end package