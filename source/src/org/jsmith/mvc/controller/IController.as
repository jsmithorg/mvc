package org.jsmith.mvc.controller{	import flash.events.Event;		/**	 * 	The <code>IController</code> is an interface for the single access point to 	 *  the application's controller logic (<code>ICommand</code> objects).	 * 	<p><code>ICommand</code> types must be registered with an associated <code>MVCEvent</code> 	 *  using the class that implements this interface in order to participate in the MVC framework.</p>	 *  <p>Classes the implement <code>IController</code> must keep track of and contain	 * 	references to any <code>ICommand</code> instances registered using the <code>registerCommand(eventName:String, commandClass:Class)</code>	 *  method.</p>	 * 	 * 	@see org.jsmith.mvc.controller.Controller	 * 	@see org.jsmith.mvc.controller.FrontController	 * 	 * 	@author Justin Smith [justin@jsmith.org]	 */	public interface IController	{		/**		 * 	Registers an <code>ICommand</code> instance with the <code>Controller</code>.		 *			 * 	@param eventName The string value of an <code>MVCEvent</code> to associate with this instance.		 *  @param commandClass The class to register to be executed when the <code>eventName</code>		 *  <code>MVCEvent</code> is executed.		 * 		 * 	@throws com.glg.mvc.error.MVCError The <code>commandClass</code> parameter must be a class that		 *  implements the <code>ICommand</code> interface, otherwise this error is thrown with the following 		 * 	message: <em>class must implement the ICommand interface</em>		 */		function registerCommand(eventName:String, commandClass:Class):void;			/**		 * 	Executes an <code>ICommand</code> instance from the <code>Controller</code>.		 *			 * 	@param event The <code>MVCEvent</code> associted to a particular <code>ICommand</code>		 * 		 * 	@throws com.glg.mvc.error.MVCError The event must be associated with an <code>ICommand</code>, 		 *  otherwise this error is thrown with the following message: <em>command not found for event</em>		 */		function executeCommand(event:Event):void;			/**		 * 	Removes an <code>ICommand</code> instance from the <code>Controller</code>.		 *			 * 	@param eventName The string name of the <code>MVCEvent</code> associated to a particular <code>ICommand</code> to remove		 */		function removeCommand(eventName:String):void;			/**		 * 	Whether or not a particular event is associated with an <code>ICommand</code>		 * 		 * 	@param eventName The string name of the <code>MVCEvent</code> to check for association with an <code>ICommand</code>		 * 		 * 	@returns <code>true</code> if an <code>ICommand</code> object exists for this event name, <code>false</code> if no association was found		 */		function hasCommand(eventName:String):Boolean;			/**		 * 	Returns a string representation of the <code>IController</code> object.		 */		function toString():String;			}//end interface	}//end package