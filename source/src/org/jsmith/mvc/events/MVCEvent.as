package org.jsmith.mvc.events{	import flash.events.Event;		/**	 * 	The <code>MVCEvent</code> is an event object for use with the	 *  <code>MVCEventDispatcher</code> in our Model-View-Controller 	 *  framework.	 *  <p><code>MVCEvent</code> objects are the transport and communication	 *  mechanism.	 * 	 * 	@see org.jsmith.mvc.events.MVCEventDispatcher	 * 	 * 	@author Justin Smith [justin@jsmith.org]	 */	public class MVCEvent extends Event	{		/**		 * 	Represents the event that is dispatched when an <code>IView</code>		 *  object is registered with the <code>ViewRegister</code>		 * 		 *  @see org.jsmith.mvc.view.IView		 *  @see org.jsmith.mvc.view.ViewRegister		 */		public static const VIEW_REGISTERED:String = "viewRegistered";				/**		 * 	Represents the event that is dispatched when an <code>IView</code>		 *  object is removed from the <code>ViewRegister</code>		 * 		 *  @see org.jsmith.mvc.view.IView		 *  @see org.jsmith.mvc.view.ViewRegister		 */		public static const VIEW_REMOVED:String = "viewRemoved";				/**		 * 	Represents the event that is dispatched when an <code>IModel</code>		 *  object is registered with the <code>ModelRegister</code>		 * 		 *  @see org.jsmith.mvc.model.IModel		 *  @see org.jsmith.mvc.model.ModelRegister		 */		public static const MODEL_REGISTERED:String = "modelRegistered";				/**		 * 	Represents the event that is dispatched when an <code>IModel</code>		 *  object is removed from the <code>ModelRegister</code>		 * 		 *  @see org.jsmith.mvc.model.IModel		 *  @see org.jsmith.mvc.model.ModelRegister		 */		public static const MODEL_REMOVED:String = "modelRemoved";				/**		 * 	Represents the event that is dispatched when an <code>ICommand</code>		 *  progresses.		 * 		 *  @see org.jsmith.mvc.controller.command.ICommand		 */		public static const COMMAND_PROGRESS:String = "commandProgress";				/**		 * 	An object containing any data we want to pass with the event.		 */		public var data:*;            	/**      	 * 	Constructor, creates a new <code>MVCEvent</code> object to be dispatched using the <code>MVCEventDispatcher</code>.      	 *       	 *  @param type A string value representing the event type.      	 *  @param data An arbitrary object for passing data arguments along with the event.      	 * 	@param bubbles Whether or not the event will bubble.      	 *  @param cancelable Whether or not the even is cancelable.      	 *       	 *  @see org.jsmith.mvc.events.MVCEventDispatcher      	 */		public function MVCEvent(type:String, data:* = null, bubbles:Boolean = false, cancelable:Boolean = false)		{			super(type, bubbles, cancelable);						this.data = data;					}//end constructor				/**		* Dispatch this event via the MVC event dispatcher.		*/		public function dispatch():Boolean		{			return MVCEventDispatcher.getInstance().dispatchEvent(this);				}//end method	  	}//end class	}//end package